From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: JRoy <joshroy126@gmail.com>
Date: Wed, 1 Jul 2020 18:01:49 -0400
Subject: [PATCH] Remove streams from classes related villager gossip


diff --git a/src/main/java/net/minecraft/world/entity/ai/gossip/Reputation.java b/src/main/java/net/minecraft/world/entity/ai/gossip/Reputation.java
index 9cc3a18636a356977577076e96cb7be706c61abf..7d34d1157786227ac210edc1595a024ccb61a3e9 100644
--- a/src/main/java/net/minecraft/world/entity/ai/gossip/Reputation.java
+++ b/src/main/java/net/minecraft/world/entity/ai/gossip/Reputation.java
@@ -9,6 +9,7 @@ import com.mojang.serialization.DynamicOps;
 import it.unimi.dsi.fastutil.objects.Object2IntMap;
 import it.unimi.dsi.fastutil.objects.Object2IntMap.Entry;
 import it.unimi.dsi.fastutil.objects.Object2IntOpenHashMap;
+import it.unimi.dsi.fastutil.objects.ObjectArrayList; // Paper
 import it.unimi.dsi.fastutil.objects.ObjectIterator;
 import java.util.Arrays;
 import java.util.Collection;
@@ -51,8 +52,21 @@ public class Reputation {
         });
     }
 
+    // Paper start - Remove streams from reputation
+    private List<Reputation.b> decompress() {
+        List<Reputation.b> list = new ObjectArrayList<>();
+        for (Map.Entry<UUID, Reputation.a> entry : getReputations().entrySet()) {
+            for (Reputation.b cur : entry.getValue().decompress(entry.getKey())) {
+                if (cur.a() != 0)
+                    list.add(cur);
+            }
+        }
+        return list;
+    }
+    // Paper end
+
     private Collection<Reputation.b> a(Random random, int i) {
-        List<Reputation.b> list = (List) this.c().collect(Collectors.toList());
+        List<Reputation.b> list = decompress(); // Paper - Remove streams from reputation
 
         if (list.isEmpty()) {
             return Collections.emptyList();
@@ -119,7 +133,7 @@ public class Reputation {
     }
 
     public <T> Dynamic<T> a(DynamicOps<T> dynamicops) {
-        return new Dynamic(dynamicops, dynamicops.createList(this.c().map((reputation_b) -> {
+        return new Dynamic(dynamicops, dynamicops.createList(this.decompress().stream().map((reputation_b) -> {
             return reputation_b.a(dynamicops);
         }).map(Dynamic::getValue)));
     }
@@ -144,18 +158,30 @@ public class Reputation {
 
     public static class a { // Paper - make public
 
-        private final Object2IntMap<ReputationType> a;
+        private final Object2IntMap<ReputationType> a; private Object2IntMap<ReputationType> getEntries() { return a; } // Paper - OBFHELPER
 
         public a() { // Paper - make public - update CraftVillager setReputation on change
             this.a = new Object2IntOpenHashMap();
         }
 
         public int a(Predicate<ReputationType> predicate) {
-            return this.a.object2IntEntrySet().stream().filter((entry) -> {
-                return predicate.test(entry.getKey());
-            }).mapToInt((entry) -> {
-                return entry.getIntValue() * ((ReputationType) entry.getKey()).g;
-            }).sum();
+            // Paper start - Remove streams from reputation
+            int weight = 0;
+            for (Object2IntMap.Entry<ReputationType> entry : getEntries().object2IntEntrySet()) {
+                if (predicate.test(entry.getKey())) {
+                    weight += entry.getIntValue() * entry.getKey().getWeight();
+                }
+            }
+            return weight;
+        }
+
+        public List<Reputation.b> decompress(UUID uuid) {
+            List<Reputation.b> list = new ObjectArrayList<>();
+            for (Object2IntMap.Entry<ReputationType> entry : getEntries().object2IntEntrySet()) {
+                list.add(new Reputation.b(uuid, entry.getKey(), entry.getIntValue()));
+            }
+            return list;
+            // Paper - end
         }
 
         public Stream<Reputation.b> a(UUID uuid) {
diff --git a/src/main/java/net/minecraft/world/entity/ai/gossip/ReputationType.java b/src/main/java/net/minecraft/world/entity/ai/gossip/ReputationType.java
index 89651e6e3bb1cfbb8eb8a120b3c3e553cd831a68..6036476aac4a81152e8b142445041ecdb2d6e5d1 100644
--- a/src/main/java/net/minecraft/world/entity/ai/gossip/ReputationType.java
+++ b/src/main/java/net/minecraft/world/entity/ai/gossip/ReputationType.java
@@ -11,7 +11,7 @@ public enum ReputationType {
     MAJOR_NEGATIVE("major_negative", -5, 100, 10, 10), MINOR_NEGATIVE("minor_negative", -1, 200, 20, 20), MINOR_POSITIVE("minor_positive", 1, 200, 1, 5), MAJOR_POSITIVE("major_positive", 5, 100, 0, 100), TRADING("trading", 1, 25, 2, 20);
 
     public final String f;
-    public final int g;
+    public final int g; public int getWeight() { return g; } // Paper - OBFHELPER
     public final int h;
     public final int i;
     public final int j;
