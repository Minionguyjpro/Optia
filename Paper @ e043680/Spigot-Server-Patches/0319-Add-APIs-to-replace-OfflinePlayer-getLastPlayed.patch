From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Zach Brown <zach@zachbr.io>
Date: Wed, 2 Jan 2019 00:35:43 -0600
Subject: [PATCH] Add APIs to replace OfflinePlayer#getLastPlayed

Currently OfflinePlayer#getLastPlayed could more accurately be described
as "OfflinePlayer#getLastTimeTheirDataWasSaved".

The API doc says it should return the last time the server "witnessed"
the player, whilst also saying it should return the last time they
logged in. The current implementation does neither.

Given this interesting contradiction in the API documentation and the
current defacto implementation, I've elected to deprecate (with no
intent to remove) and replace it with two new methods, clearly named and
documented as to their purpose.

diff --git a/src/main/java/net/minecraft/server/level/EntityPlayer.java b/src/main/java/net/minecraft/server/level/EntityPlayer.java
index e755191435e74246b309f8fe5a668dae2e499df1..8d88ed3d68146fbcb090847351945689518e59a9 100644
--- a/src/main/java/net/minecraft/server/level/EntityPlayer.java
+++ b/src/main/java/net/minecraft/server/level/EntityPlayer.java
@@ -214,6 +214,7 @@ public class EntityPlayer extends EntityHuman implements ICrafting {
     public int ping;
     public boolean viewingCredits;
     private int containerUpdateDelay; // Paper
+    public long loginTime; // Paper
     // Paper start - cancellable death event
     public boolean queueHealthUpdatePacket = false;
     public net.minecraft.network.protocol.game.PacketPlayOutUpdateHealth queuedHealthUpdatePacket;
diff --git a/src/main/java/net/minecraft/server/players/PlayerList.java b/src/main/java/net/minecraft/server/players/PlayerList.java
index 2299581fa889c0e8ddc6b2cc1d3551d02ff8dc2d..7515e9ddbc89de882373469cf3c46046c76af974 100644
--- a/src/main/java/net/minecraft/server/players/PlayerList.java
+++ b/src/main/java/net/minecraft/server/players/PlayerList.java
@@ -168,6 +168,7 @@ public abstract class PlayerList {
     }
 
     public void a(NetworkManager networkmanager, EntityPlayer entityplayer) {
+        entityplayer.loginTime = System.currentTimeMillis(); // Paper
         GameProfile gameprofile = entityplayer.getProfile();
         UserCache usercache = this.server.getUserCache();
         GameProfile gameprofile1 = usercache.getProfile(gameprofile.getId());
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftOfflinePlayer.java b/src/main/java/org/bukkit/craftbukkit/CraftOfflinePlayer.java
index 9b8d7b176e288fa715177196e7aff92900d8567a..1e741158bbcc0991259436bec549b32df61f0c54 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftOfflinePlayer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftOfflinePlayer.java
@@ -244,6 +244,61 @@ public class CraftOfflinePlayer implements OfflinePlayer, ConfigurationSerializa
         return getData() != null;
     }
 
+    // Paper start
+    @Override
+    public long getLastLogin() {
+        Player player = getPlayer();
+        if (player != null) return player.getLastLogin();
+
+        NBTTagCompound data = getPaperData();
+
+        if (data != null) {
+            if (data.hasKey("LastLogin")) {
+                return data.getLong("LastLogin");
+            } else {
+                // if the player file cannot provide accurate data, this is probably the closest we can approximate
+                File file = getDataFile();
+                return file.lastModified();
+            }
+        } else {
+            return 0;
+        }
+    }
+
+    @Override
+    public long getLastSeen() {
+        Player player = getPlayer();
+        if (player != null) return player.getLastSeen();
+
+        NBTTagCompound data = getPaperData();
+
+        if (data != null) {
+            if (data.hasKey("LastSeen")) {
+                return data.getLong("LastSeen");
+            } else {
+                // if the player file cannot provide accurate data, this is probably the closest we can approximate
+                File file = getDataFile();
+                return file.lastModified();
+            }
+        } else {
+            return 0;
+        }
+    }
+
+    private NBTTagCompound getPaperData() {
+        NBTTagCompound result = getData();
+
+        if (result != null) {
+            if (!result.hasKey("Paper")) {
+                result.set("Paper", new NBTTagCompound());
+            }
+            result = result.getCompound("Paper");
+        }
+
+        return result;
+    }
+    // Paper end
+
     @Override
     public Location getBedSpawnLocation() {
         NBTTagCompound data = getData();
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
index 6c5075ef2420131aa21b403623a5dfa485ee73e5..25e0d0dd7b114560896679f0314cea288d7a768c 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
@@ -147,6 +147,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     private org.bukkit.event.player.PlayerResourcePackStatusEvent.Status resourcePackStatus;
     private String resourcePackHash;
     private static final boolean DISABLE_CHANNEL_LIMIT = System.getProperty("paper.disableChannelLimit") != null; // Paper - add a flag to disable the channel limit
+    private long lastSaveTime;
     // Paper end
 
     public CraftPlayer(CraftServer server, EntityPlayer entity) {
@@ -1483,6 +1484,18 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
         this.firstPlayed = firstPlayed;
     }
 
+    // Paper start
+    @Override
+    public long getLastLogin() {
+        return getHandle().loginTime;
+    }
+
+    @Override
+    public long getLastSeen() {
+        return isOnline() ? System.currentTimeMillis() : this.lastSaveTime;
+    }
+    // Paper end
+
     public void readExtraData(NBTTagCompound nbttagcompound) {
         hasPlayedBefore = true;
         if (nbttagcompound.hasKey("bukkit")) {
@@ -1505,6 +1518,8 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     }
 
     public void setExtraData(NBTTagCompound nbttagcompound) {
+        this.lastSaveTime = System.currentTimeMillis(); // Paper
+
         if (!nbttagcompound.hasKey("bukkit")) {
             nbttagcompound.set("bukkit", new NBTTagCompound());
         }
@@ -1519,6 +1534,16 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
         data.setLong("firstPlayed", getFirstPlayed());
         data.setLong("lastPlayed", System.currentTimeMillis());
         data.setString("lastKnownName", handle.getName());
+
+        // Paper start - persist for use in offline save data
+        if (!nbttagcompound.hasKey("Paper")) {
+            nbttagcompound.set("Paper", new NBTTagCompound());
+        }
+
+        NBTTagCompound paper = nbttagcompound.getCompound("Paper");
+        paper.setLong("LastLogin", handle.loginTime);
+        paper.setLong("LastSeen", System.currentTimeMillis());
+        // Paper end
     }
 
     @Override
