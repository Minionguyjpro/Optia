From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Aikar <aikar@aikar.co>
Date: Mon, 16 May 2016 23:19:16 -0400
Subject: [PATCH] Avoid blocking on Network Manager creation

Per Paper issue 294

diff --git a/src/main/java/net/minecraft/server/network/ServerConnection.java b/src/main/java/net/minecraft/server/network/ServerConnection.java
index f66a5ba901601c1d359a287861a2edd8e3a106a7..d992cb5cd827e0fe655809e1088939cdad9c2301 100644
--- a/src/main/java/net/minecraft/server/network/ServerConnection.java
+++ b/src/main/java/net/minecraft/server/network/ServerConnection.java
@@ -52,6 +52,15 @@ public class ServerConnection {
     public volatile boolean c;
     private final List<ChannelFuture> listeningChannels = Collections.synchronizedList(Lists.newArrayList());
     private final List<NetworkManager> connectedChannels = Collections.synchronizedList(Lists.newArrayList());
+    // Paper start - prevent blocking on adding a new network manager while the server is ticking
+    private final java.util.Queue<NetworkManager> pending = new java.util.concurrent.ConcurrentLinkedQueue<>();
+    private void addPending() {
+        NetworkManager manager = null;
+        while ((manager = pending.poll()) != null) {
+            connectedChannels.add(manager);
+        }
+    }
+    // Paper end
 
     public ServerConnection(MinecraftServer minecraftserver) {
         this.e = minecraftserver;
@@ -87,7 +96,8 @@ public class ServerConnection {
                     int j = ServerConnection.this.e.k();
                     Object object = j > 0 ? new NetworkManagerServer(j) : new NetworkManager(EnumProtocolDirection.SERVERBOUND);
 
-                    ServerConnection.this.connectedChannels.add((NetworkManager) object); // CraftBukkit - decompile error
+                    //ServerConnection.this.connectedChannels.add((NetworkManager) object); // CraftBukkit - decompile error
+                    pending.add((NetworkManager) object); // Paper
                     channel.pipeline().addLast("packet_handler", (ChannelHandler) object);
                     ((NetworkManager) object).setPacketListener(new HandshakeListener(ServerConnection.this.e, (NetworkManager) object));
                 }
@@ -126,6 +136,7 @@ public class ServerConnection {
 
         synchronized (this.connectedChannels) {
             // Spigot Start
+            this.addPending(); // Paper
             // This prevents players from 'gaming' the server, and strategically relogging to increase their position in the tick order
             if ( org.spigotmc.SpigotConfig.playerShuffle > 0 && MinecraftServer.currentTick % org.spigotmc.SpigotConfig.playerShuffle == 0 )
             {
