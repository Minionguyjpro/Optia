From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Alfie Cleveland <alfeh@me.com>
Date: Fri, 25 Nov 2016 13:22:40 +0000
Subject: [PATCH] Optimise removeQueue


diff --git a/src/main/java/net/minecraft/server/network/LoginListener.java b/src/main/java/net/minecraft/server/network/LoginListener.java
index 49a0aefc7f9544b36175fdf3161b255e878952a6..c45647f2d05ed6b170aad10c0a3fb94570d2dd90 100644
--- a/src/main/java/net/minecraft/server/network/LoginListener.java
+++ b/src/main/java/net/minecraft/server/network/LoginListener.java
@@ -116,6 +116,12 @@ public class LoginListener implements PacketLoginInListener {
 
     }
 
+    // Paper start - Cache authenticator threads
+    private static final AtomicInteger threadId = new AtomicInteger(0);
+    private static final java.util.concurrent.ExecutorService authenticatorPool = java.util.concurrent.Executors.newCachedThreadPool(
+            r -> new Thread(r, "User Authenticator #" + threadId.incrementAndGet())
+    );
+    // Paper end
     // Spigot start
     public void initUUID()
     {
@@ -195,8 +201,8 @@ public class LoginListener implements PacketLoginInListener {
             this.networkManager.sendPacket(new PacketLoginOutEncryptionBegin("", this.server.getKeyPair().getPublic().getEncoded(), this.e));
         } else {
             // Spigot start
-            new Thread("User Authenticator #" + LoginListener.b.incrementAndGet()) {
-
+            // Paper start - Cache authenticator threads
+            authenticatorPool.execute(new Runnable() {
                 @Override
                 public void run() {
                     try {
@@ -207,7 +213,8 @@ public class LoginListener implements PacketLoginInListener {
                         server.server.getLogger().log(java.util.logging.Level.WARNING, "Exception verifying " + i.getName(), ex);
                     }
                 }
-            }.start();
+            });
+            // Paper end
             // Spigot end
         }
 
@@ -236,7 +243,8 @@ public class LoginListener implements PacketLoginInListener {
             throw new IllegalStateException("Protocol error", cryptographyexception);
         }
 
-        Thread thread = new Thread("User Authenticator #" + LoginListener.b.incrementAndGet()) {
+        // Paper start - Cache authenticator threads
+        authenticatorPool.execute(new Runnable() {
             public void run() {
                 GameProfile gameprofile = LoginListener.this.i;
 
@@ -281,10 +289,8 @@ public class LoginListener implements PacketLoginInListener {
 
                 return LoginListener.this.server.W() && socketaddress instanceof InetSocketAddress ? ((InetSocketAddress) socketaddress).getAddress() : null;
             }
-        };
-
-        thread.setUncaughtExceptionHandler(new DefaultUncaughtExceptionHandler(LoginListener.LOGGER));
-        thread.start();
+        });
+        // Paper end
     }
 
     // Spigot start
